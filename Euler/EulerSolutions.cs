namespace Euler
{
	using System.Linq;
	using ExpectEx.NUnit;
	using NUnit.Framework;

	[TestFixture]
	public class EulerSolutions : AssertionHelperEx
	{
		/// <summary>
		/// Find the sum of all the multiples of 3 or 5 below 1000.
		/// </summary>
		[Test]
		public void Problem1()
		{
			var sum = Enumerable
				.Range(1, 999)
				.Where(n => n%3 == 0 || n%5 == 0)
				.Sum();

			Expect(() => sum == 233168);
		}

		/// <summary>
		/// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
		/// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
		/// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
		/// </summary>
		[Test]
		public void Problem2()
		{
			var sum = Fibonacci.Sequence()
				.TakeWhile(n => n <= 4000000)
				.Where(n => n%2L == 0)
				.Sum();

			Expect(() => sum == 4613732);
		}

		/// <summary>
		/// What is the largest prime factor of the number 600851475143 ?
		/// </summary>
		[Test]
		public void Problem3()
		{
			var factors = FermatFactorization.Of(600851475143);

			Expect(() => factors.Max() == 6857);
		}

		/// <summary>
		/// Find the largest palindrome made from the product of two 3-digit numbers.
		/// </summary>
		[Test]
		public void Problem4()
		{
			/*
					999	998	997	996
				999	1,1	1,2	1,3	1,4
				998		2,2	2,3	2,4
				997			3,3	3,4
				996				4,4

				I will traverse this diagonally on the upper half only: 1,1 ; 1,2 ; 2,2 ; 1,3 ; 2,3 ; 1,4 ; etc
			 	This results in the numbers appearing in decreasing order.
			 */

			var largestPalindrome = Matrix.Traverse(999, 999, (i, j) => (999 - i)*(999 - j))
				.FirstOrDefault(Palindrome.Test);

			Expect(() => largestPalindrome == 906609);
		}

		/// <summary>
		/// What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
		/// </summary>
		[Test]
		public void Problem5()
		{
			var result = Enumerable
				.Range(1, 20)
				.Reverse()
				.Aggregate(1L, (lcm, x) => LeastCommonMultipe.Of(lcm, x));

			Expect(() => result == 232792560);
		}

		/// <summary>
		/// Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
		/// </summary>
		[Test]
		public void Problem6()
		{
			var sumOfSquares = Enumerable
				.Range(1, 100)
				.Select(x => x*(long) x)
				.Sum();

			var sumOf1to100 = Enumerable
				.Range(1, 100)
				.Sum();

			var squareOfSum = sumOf1to100*sumOf1to100;
			var result = squareOfSum - sumOfSquares;

			Expect(() => result == 25164150);
		}

		/// <summary>
		/// What is the 10,001st prime number?
		/// </summary>
		[Test]
		public void Problem7()
		{
			var prime = PrimeNumbers.Sequence()
				.Skip(10000)
				.First();

			Expect(() => prime == 104743);
		}
	}
}